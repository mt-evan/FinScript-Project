// The top-level program that contains all statements
Program:
    statements*=Statement
;

// The different types of statements
Statement:
    Output | Assignment | IfStatement | ForLoop | WhileLoop | BreakStatement | ContinueStatement | FunctionCall
;

// If Statement (includes elif and else)
IfStatement:
    'if' '(' condition=Expression ')' '{' thenBody+=Statement* '}'
    (elifClauses+=ElifClause)*
    ('else' '{' elseBody+=Statement* '}')?
;

// Elif Clause for if-elif-else construct
ElifClause:
    'elif' '(' condition=Expression ')' '{' body+=Statement* '}'
;

// For Loop (range-based for loop)
ForLoop:
    'for' '(' var=ID '<-' start=Expression 'to' end=Expression ')' '{' body+=Statement* '}'
;

// While Loop (condition-based while loop)
WhileLoop:
    'while' '(' condition=Expression ')' '{' body+=Statement* '}'
;

BreakStatement:
    'break'
;

ContinueStatement:
    'continue'
;

// Output Statements
Output:
    PrintStringNL | PrintNL | PrintString | Print
;

// Print a string
PrintStringNL:
    'println' '(' content=STRING ')' | 'println' '()'
;

// Print a variable
PrintNL:
    ('println' '(' content=ID ')')
;

PrintString:
    'print' '(' content=STRING ')'
;

Print:
    'print' '(' content=ID ')'
;

// Assignment statement (either Declaration or Reassignment)
Assignment:
    Declaration | Reassignment
;

// Declaration of a new variable
Declaration:
    'let' var=ID '<-' expr=Expression
;

// Reassignment of an existing variable
Reassignment:
    var=ID '<-' expr=Expression
;

// Function Definition
FunctionDefinition:
    'function' funcName=ID '(' params*=ID (',' params+=ID)* ')' '{' body+=Statement* '}'
;

// Function Call
FunctionCall:
   // funcName=ID '(' args*=Expression (',' args+=Expression)* ')'
   //'$$$' //this does not mess up the parsing
   funcName=FuncID '(' args*=Expression (',' args+=Expression)* ')'
;

// Expressions (can now include both Boolean and Arithmetic expressions)
Expression:
    ArithmeticExpression | BooleanExpression | FunctionCall
;

// Boolean expressions: Logical OR has the lowest precedence
BooleanExpression:
    BooleanTerm ('||' BooleanTerm)*
;

// Boolean terms: Logical AND has higher precedence than OR
BooleanTerm:
    BooleanFactor ('&&' BooleanFactor)*
;

// Boolean factors: Logical NOT has the highest precedence
BooleanFactor:
    '!' BooleanFactor
    | Comparison
    | '(' BooleanExpression ')'
;

// Comparison expressions: Includes equality, inequality, and relational operators
Comparison:
    ArithmeticExpression (('==' | '!=' | '<=' | '>=' | '<' | '>') ArithmeticExpression)?
;

// Arithmetic expressions: Addition and subtraction have lower precedence
ArithmeticExpression:
    Term (('+' | '-') Term)*
;

// Terms: Multiplication, division, and modulus have higher precedence
Term:
    Factor (('*' | '/' | '%') Factor)*
;

// Factors: Negation has the highest precedence within arithmetic
Factor:
    '-' Factor
    | Value
;

// Values: Integer, Boolean, ID (variable), or nested expressions
Value:
    BOOL | MoneyValue | FLOAT | INT | ID | '(' Expression ')'
;

MoneyValue:
    (FLOAT | INT) ('USD' | 'EUR' | 'GBP' | 'JPY')  // Add more currencies
;

FuncID: /[a-zA-Z_][a-zA-Z0-9_]*\(/    ;

// Boolean values: true and false
BOOL: 'true' | 'false';

// Integer values: Integer literals
INT: /[0-9]+/;

FLOAT:
    /[0-9]*\.[0-9]+/
;

// Identifier: Variable names (alphanumeric with optional underscores)
ID: /[a-zA-Z_][a-zA-Z0-9_]*/;

// String literals
STRING: /"([^"\\]|\\.)*"/;

// Comments
Comment:
    /\/\/.*$/ 
;
